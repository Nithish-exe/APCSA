package COW2;

public class BranchTesterLevel6
{
    public static double getLevel6Score(){
        double score = 0;
        if(testgiveLetterGrade()){
            score += .4;
        }
        if(testgetMostCommonNumber()){
            score += .2;
        }
        if(testwhatIsMySalaryAfterTax()){
            score += .2;
        }
        if(testisALeapYear()){
            score += .2;
        }
        return score;
    }
    
    public static void main(String [] arg){
        testLevel6();
    }

    public static boolean testLevel6(){
        boolean one = testgiveLetterGrade();
        boolean two = testgetMostCommonNumber();
        boolean three = testwhatIsMySalaryAfterTax();
        boolean four = testisALeapYear();
        if(one && two && three && four){
            System.out.println("Level 6 works");
            return true;
        }else{
            System.out.println("Level 6 DOES NOT work");
            return false;
        }
    }

    public static boolean testadjustForHonors(){
        Grader student = new Grader(); 
        boolean output = true;

        double [] grades = {50.0, 50.5, 51.0, 51.5, 52.0, 52.5, 53.0, 53.5, 54.0, 54.5, 55.0, 55.5, 56.0, 56.5, 57.0, 57.5, 58.0, 58.5, 59.0, 59.5, 60.0, 60.5, 61.0, 61.5, 62.0, 62.5, 63.0, 63.5, 64.0, 64.5, 65.0, 65.5, 66.0, 66.5, 67.0, 67.5, 68.0, 68.5, 69.0, 69.5, 70.0, 70.5, 71.0, 71.5, 72.0, 72.5, 73.0, 73.5, 74.0, 74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.5, 79.0, 79.5, 80.0, 80.5, 81.0, 81.5, 82.0, 82.5, 83.0, 83.5, 84.0, 84.5, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.5, 89.0, 89.5, 90.0, 90.5, 91.0, 91.5, 92.0, 92.5, 93.0, 93.5, 94.0, 94.5, 95.0, 95.5, 96.0, 96.5, 97.0, 97.5, 98.0, 98.5, 99.0, 99.5, 100.0, };
        double [] results = {50.0, 50.5, 51.0, 51.5, 52.0, 52.5, 53.0, 53.5, 54.0, 54.5, 55.0, 55.5, 56.0, 56.5, 57.0, 57.5, 58.0, 58.5, 59.0, 59.5, 70.0, 70.5, 71.0, 71.5, 72.0, 72.5, 73.0, 73.5, 74.0, 74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.5, 79.0, 79.5, 80.0, 80.5, 81.0, 81.5, 82.0, 82.5, 83.0, 83.5, 84.0, 84.5, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.5, 89.0, 89.5, 90.0, 90.5, 91.0, 91.5, 92.0, 92.5, 93.0, 93.5, 94.0, 94.5, 95.0, 95.5, 96.0, 96.5, 97.0, 97.5, 98.0, 98.5, 99.0, 99.5, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, };

        for(int i = 0; i < grades.length; i++){
            if(Math.abs(student.adjustForHonors(grades[i]) - results[i]) > .0001){
                System.out.println("adjustForHonors failed, " + "adjustForHonors(" + grades[i] + ")" + " results in " + student.adjustForHonors(grades[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("adjustForHonors works");
        }else{
            System.out.println("adjustForHonors does not work");
        }
        return output;
    }

    public static boolean testadjustForCurve(){
        Grader student = new Grader(); 
        boolean output = true;

        double [] grades = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, };
        double [] results = {25.0, 25.75, 26.5, 27.25, 28.0, 28.75, 29.5, 30.25, 31.0, 31.75, 32.5, 33.25, 34.0, 34.75, 35.5, 36.25, 37.0, 37.75, 38.5, 39.25, 40.0, 40.75, 41.5, 42.25, 43.0, 43.75, 44.5, 45.25, 46.0, 46.75, 47.5, 48.25, 49.0, 49.75, 50.5, 51.25, 52.0, 52.75, 53.5, 54.25, 55.0, 55.75, 56.5, 57.25, 58.0, 58.75, 59.5, 60.25, 61.0, 61.75, 62.5, 63.25, 64.0, 64.75, 65.5, 66.25, 67.0, 67.75, 68.5, 69.25, 70.0, 70.75, 71.5, 72.25, 73.0, 73.75, 74.5, 75.25, 76.0, 76.75, 77.5, 78.25, 79.0, 79.75, 80.5, 81.25, 82.0, 82.75, 83.5, 84.25, 85.0, 85.75, 86.5, 87.25, 88.0, 88.75, 89.5, 90.25, 91.0, 91.75, 92.5, 93.25, 94.0, 94.75, 95.5, 96.25, 97.0, 97.75, 98.5, 99.25, 100.0, };

        for(int i = 0; i < grades.length; i++){
            if(Math.abs(student.adjustForCurve(grades[i]) - results[i]) > .0001){
                System.out.println("adjustForCurve failed, " + "adjustForCurve(" + grades[i] + ")" + " results in " + student.adjustForCurve(grades[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("adjustForCurve works");
        }else{
            System.out.println("adjustForCurve does not work");
        }
        return output;
    }


    public static boolean testgiveLetterGrade(){
        Grader student = new Grader(); 
        boolean output = true;

        double [] grades = {40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, };
        boolean [] honors = {false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, };
        boolean [] passFail = {false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, };
        boolean [] isCurved = {false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, };
        String [] results = {"F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "D-", "F", "F", "F", "C-", "F", "F", "F", "D-", "F", "F", "F", "C-", "F", "F", "F", "D-", "F", "F", "F", "C-", "F", "F", "F", "D-", "F", "F", "F", "C-", "F", "F", "F", "D", "F", "F", "F", "C", "F", "F", "F", "D", "F", "F", "F", "C", "F", "F", "F", "D", "F", "F", "F", "C", "F", "F", "F", "D", "F", "F", "F", "C", "F", "F", "F", "D", "F", "F", "F", "C", "F", "F", "F", "D+", "F", "F", "F", "C+", "F", "F", "F", "D+", "F", "F", "F", "C+", "F", "F", "F", "D+", "F", "F", "F", "C+", "F", "F", "F", "D+", "F", "F", "F", "C+", "F", "F", "D-", "C-", "P", "P", "C-", "B-", "P", "P", "D-", "C-", "P", "P", "C-", "B-", "P", "P", "D-", "C-", "P", "P", "C-", "B-", "P", "P", "D", "C-", "P", "P", "C", "B-", "P", "P", "D", "C", "P", "P", "C", "B", "P", "P", "D", "C", "P", "P", "C", "B", "P", "P", "D", "C", "P", "P", "C", "B", "P", "P", "D+", "C", "P", "P", "C+", "B", "P", "P", "D+", "C", "P", "P", "C+", "B", "P", "P", "D+", "C", "P", "P", "C+", "B", "P", "P", "C-", "C+", "P", "P", "B-", "B+", "P", "P", "C-", "C+", "P", "P", "B-", "B+", "P", "P", "C-", "C+", "P", "P", "B-", "B+", "P", "P", "C", "C+", "P", "P", "B", "B+", "P", "P", "C", "B-", "P", "P", "B", "A-", "P", "P", "C", "B-", "P", "P", "B", "A-", "P", "P", "C", "B-", "P", "P", "B", "A-", "P", "P", "C+", "B-", "P", "P", "B+", "A-", "P", "P", "C+", "B", "P", "P", "B+", "A", "P", "P", "C+", "B", "P", "P", "B+", "A", "P", "P", "B-", "B", "P", "P", "A-", "A", "P", "P", "B-", "B", "P", "P", "A-", "A", "P", "P", "B-", "B", "P", "P", "A-", "A", "P", "P", "B", "B+", "P", "P", "A", "A+", "P", "P", "B", "B+", "P", "P", "A", "A+", "P", "P", "B", "B+", "P", "P", "A", "A+", "P", "P", "B", "B+", "P", "P", "A", "A+", "P", "P", "B+", "A-", "P", "P", "A+", "A+", "P", "P", "B+", "A-", "P", "P", "A+", "A+", "P", "P", "B+", "A-", "P", "P", "A+", "A+", "P", "P", "A-", "A-", "P", "P", "A+", "A+", "P", "P", "A-", "A", "P", "P", "A+", "A+", "P", "P", "A-", "A", "P", "P", "A+", "A+", "P", "P", "A", "A", "P", "P", "A+", "A+", "P", "P", "A", "A", "P", "P", "A+", "A+", "P", "P", "A", "A", "P", "P", "A+", "A+", "P", "P", "A", "A+", "P", "P", "A+", "A+", "P", "P", "A+", "A+", "P", "P", "A+", "A+", "P", "P", "A+", "A+", "P", "P", "A+", "A+", "P", "P", "A+", "A+", "P", "P", "A+", "A+", "P", "P", "A+", "A+", "P", "P", "A+", "A+", "P", "P",};

        for(int i = 0; i < grades.length; i++){
            if(!student.giveLetterGrade(grades[i], honors[i], passFail[i], isCurved[i]).equals(results[i])){
                System.out.println("giveLetterGrade failed, " + "giveLetterGrade(" + grades[i] + ", " + honors[i] + ", " + passFail[i] + ", " + isCurved[i] + ")" + " results in " + student.giveLetterGrade(grades[i], honors[i], passFail[i], isCurved[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("giveLetterGrade works");
        }else{
            System.out.println("giveLetterGrade does not work");
        }
        return output;
    }


    public static boolean testgetMostCommonNumber(){
        NumberAnalyzer student = new NumberAnalyzer(); 
        boolean output = true;

        int [] num1s = {-438, 	-700, 	-786, 	-348, 	596, 	-157, 	-78, 	-409, 	-536, 	-259, 	180, 	994, 	507, 	-307, 	938, 	674, 	81, 	-515, 	-515, 	-230, 	-55, 	606, 	746, 	-330, 	-739, 	-783, 	454, 	-442, 	-308, 	-774, 	-19, 	376, 	};
        int [] num2s = {421, 	939, 	-604, 	-740, 	596, 	-117, 	200, 	255, 	408, 	-933, 	180, 	-791, 	268, 	-594, 	157, 	674, 	81, 	-515, 	-515, 	-826, 	-75, 	606, 	-693, 	972, 	-739, 	875, 	756, 	-942, 	-308, 	-774, 	-19, 	376, 	};
        int [] num3s = {-575, 	-596, 	-649, 	-737, 	-50, 	914, 	-78, 	-778, 	-462, 	-971, 	848, 	-791, 	-487, 	-307, 	656, 	674, 	81, 	-515, 	-434, 	-826, 	-55, 	125, 	-294, 	-330, 	707, 	875, 	454, 	972, 	-308, 	-774, 	-19, 	376, 	};
        int [] num4s = {561, 	-631, 	-794, 	-296, 	609, 	-157, 	505, 	-636, 	430, 	-933, 	180, 	-791, 	268, 	-307, 	157, 	583, 	-980, 	-515, 	-515, 	-826, 	-55, 	606, 	-294, 	972, 	-739, 	-165, 	756, 	-442, 	-308, 	-774, 	-19, 	376, 	};
        int [] num5s = {-305, 	-645, 	602, 	244, 	-187, 	-876, 	298, 	255, 	-462, 	-55, 	-192, 	173, 	268, 	-905, 	157, 	-465, 	81, 	468, 	-515, 	-826, 	-55, 	606, 	-693, 	-793, 	707, 	-783, 	854, 	972, 	-308, 	-774, 	-19, 	376, 	};
        int [] results = {-67, 	-326, 	-446, 	-375, 	596, 	-157, 	-78, 	255, 	-462, 	-933, 	180, 	-791, 	268, 	-307, 	157, 	674, 	81, 	-515, 	-515, 	-826, 	-55, 	606, 	-493, 	321, 	-739, 	46, 	605, 	265, 	-308, 	-774, 	-19, 	376, 	};

        for(int i = 0; i < num1s.length; i++){
            if(student.getMostCommonNumber(num1s[i], num2s[i], num3s[i], num4s[i], num5s[i]) != results[i]){
                System.out.println("getMostCommonNumber failed, " + "getMostCommonNumber(" + num1s[i] + ", " + num2s[i] + ", " + num3s[i] + ", " + num4s[i] + ", " + num5s[i] +")" + " results in " + student.getMostCommonNumber(num1s[i], num2s[i], num3s[i], num3s[i], num5s[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("getMostCommonNumber works");
        }else{
            System.out.println("getMostCommonNumber does not work");
        }
        return output;
    }


	public static boolean testWhatIsMySalary(){
        PayRoll student = new PayRoll(); 
        boolean output = true;

        String [] degrees = {"Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree"};
        int [] yearsExperience = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 32, 17, 34, 34, 15, 32, 34, 15, 13, 16, 35, 2, 4, 24, 9, 36, 11, 39, 40, 35, 15, 3, 21, 31, 21, 40, 24, 15, 22, 36, 2, 30, 0, 27, 26, 20, 5, 33, 6, 13, 7, 6, 13, 36, 15, 4, 39, 3, 12, 31, 5, 13, 27, 18, 29, 9, 29, 26, 16, 35, 27, 31, 2, 18, 3, 39, 29, 14, 38, 22, 5, 16, 24, 26, 21, 2, 20, 14, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 39, 20, 23, 13, 38, 24, 21, 37, 23, 38, 36, 16, 8, 19, 20, 16, 16, 7, 5, 19, 4, 13, 16, 31, 40, 1, 31, 27, 26, 2, 14, 10, 11, 37, 22, 16, 31, 2, 16, 37, 18, 32, 38, 25, 3, 1, 22, 26, 26, 8, 23, 14, 0, 22, 1, 18, 27, 6, 33, 11, 39, 9, 2, 12, 27, 6, 21, 21, 32, 35, 33, 5, 27, 6, 20, 19, 12, 10, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 18, 1, 24, 23, 34, 7, 24, 27, 5, 3, 10, 6, 28, 37, 1, 39, 27, 12, 17, 15, 34, 0, 17, 20, 39, 34, 31, 34, 2, 13, 14, 33, 2, 30, 15, 33, 34, 27, 25, 39, 34, 3, 30, 8, 30, 22, 24, 26, 22, 12, 33, 38, 17, 6, 9, 31, 4, 7, 38, 35, 16, 15, 38, 4, 21, 39, 37, 16, 4, 14, 6, 31, 38, 10, 2, 26, 2, 32, 27, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 29, 4, 4, 38, 7, 31, 27, 32, 15, 29, 13, 14, 5, 26, 29, 27, 14, 15, 25, 7, 0, 6, 4, 15, 25, 6, 12, 26, 33, 27, 21, 36, 17, 27, 20, 25, 18, 30, 33, 37, 18, 23, 33, 10, 20, 25, 6, 5, 17, 14, 27, 40, 17, 16, 17, 39, 40, 25, 9, 11, 26, 29, 27, 20, 4, 33, 17, 30, 39, 14, 7, 36, 28, 14, 3, 0, 35, 15, 21, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 28, 8, 39, 37, 12, 39, 35, 27, 25, 0, 32, 27, 8, 4, 26, 23, 8, 18, 15, 3, 18, 30, 21, 5, 35, 11, 25, 31, 29, 32, 15, 6, 2, 22, 30, 26, 28, 30, 34, 3, 16, 22, 4, 13, 8, 1, 34, 11, 38, 38, 23, 21, 26, 2, 22, 3, 39, 24, 15, 28, 13, 38, 22, 33, 40, 20, 17, 28, 13, 31, 6, 12, 15, 21, 6, 15, 39, 39, 8, 27, };
        Double [] sales = {0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 366544.0, 733777.0, 378650.0, 726337.0, 227906.0, 498742.0, 904042.0, 623214.0, 633448.0, 902278.0, 514099.0, 733357.0, 497035.0, 413205.0, 815210.0, 489625.0, 780056.0, 399942.0, 910618.0, 992759.0, 829657.0, 511513.0, 255672.0, 225426.0, 939283.0, 925424.0, 736961.0, 559687.0, 784671.0, 365485.0, 928429.0, 760983.0, 388400.0, 592757.0, 477640.0, 891787.0, 866130.0, 272689.0, 775286.0, 718040.0, 807659.0, 521622.0, 261064.0, 421489.0, 345917.0, 635758.0, 519074.0, 621070.0, 367029.0, 305719.0, 315820.0, 506430.0, 514557.0, 819839.0, 533986.0, 286754.0, 641070.0, 359286.0, 755069.0, 757986.0, 960142.0, 288167.0, 444032.0, 991586.0, 351922.0, 341725.0, 289070.0, 947945.0, 475389.0, 815756.0, 249635.0, 817591.0, 340425.0, 460369.0, 665834.0, 293289.0, 592824.0, 581224.0, 982336.0, 376189.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 965365.0, 451358.0, 439893.0, 919119.0, 948080.0, 536737.0, 487632.0, 910169.0, 330833.0, 638651.0, 869204.0, 699684.0, 471335.0, 256082.0, 735944.0, 773786.0, 941731.0, 671163.0, 340166.0, 677555.0, 806865.0, 460863.0, 661696.0, 290994.0, 387377.0, 338016.0, 920783.0, 260908.0, 360722.0, 624822.0, 530528.0, 991801.0, 853263.0, 461933.0, 241922.0, 598946.0, 976546.0, 856284.0, 634641.0, 426736.0, 260905.0, 270737.0, 306725.0, 535434.0, 439487.0, 458729.0, 316248.0, 559465.0, 635854.0, 446990.0, 828127.0, 740365.0, 808270.0, 769494.0, 919169.0, 537508.0, 503802.0, 255752.0, 694507.0, 419750.0, 975367.0, 676582.0, 268535.0, 641097.0, 514831.0, 350462.0, 763465.0, 603536.0, 255309.0, 413619.0, 678637.0, 210150.0, 295777.0, 456950.0, 383715.0, 811642.0, 601117.0, 432923.0, 488874.0, 349380.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 530730.0, 335568.0, 845118.0, 698125.0, 648849.0, 556696.0, 727850.0, 611513.0, 269644.0, 421451.0, 956823.0, 673472.0, 390291.0, 606350.0, 905583.0, 458648.0, 265085.0, 942900.0, 353548.0, 305013.0, 873759.0, 509950.0, 333838.0, 301733.0, 737100.0, 717887.0, 529975.0, 495463.0, 933026.0, 287790.0, 574596.0, 918165.0, 366204.0, 828698.0, 803278.0, 239584.0, 944382.0, 316083.0, 616634.0, 847519.0, 914509.0, 774682.0, 803769.0, 358980.0, 411815.0, 668786.0, 380243.0, 965403.0, 274952.0, 303139.0, 293672.0, 215004.0, 980314.0, 737547.0, 950061.0, 635431.0, 748680.0, 918334.0, 714030.0, 599808.0, 877299.0, 329774.0, 336034.0, 239329.0, 950531.0, 268617.0, 859718.0, 405499.0, 382181.0, 244832.0, 362508.0, 885162.0, 542655.0, 611698.0, 682601.0, 271436.0, 324040.0, 328365.0, 285436.0, 893685.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 596262.0, 558018.0, 822806.0, 809640.0, 407428.0, 204743.0, 737717.0, 662820.0, 781484.0, 892265.0, 668120.0, 608338.0, 966307.0, 687631.0, 802656.0, 310262.0, 985370.0, 873006.0, 941516.0, 813623.0, 546093.0, 668685.0, 615556.0, 894206.0, 558006.0, 610445.0, 816800.0, 689252.0, 913852.0, 284376.0, 293424.0, 812194.0, 386757.0, 322306.0, 362390.0, 554551.0, 696591.0, 360938.0, 392811.0, 578100.0, 998636.0, 867846.0, 713212.0, 500464.0, 447698.0, 937432.0, 295773.0, 377228.0, 290792.0, 359982.0, 770723.0, 883714.0, 341495.0, 866947.0, 523958.0, 399540.0, 889139.0, 855558.0, 431064.0, 999091.0, 495918.0, 495923.0, 580819.0, 351010.0, 335086.0, 723719.0, 341335.0, 329869.0, 323321.0, 621595.0, 721949.0, 943102.0, 500417.0, 292430.0, 983989.0, 376353.0, 509411.0, 527563.0, 853544.0, 560368.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 630276.0, 373104.0, 689360.0, 262529.0, 820301.0, 297489.0, 958990.0, 306182.0, 814289.0, 463360.0, 976315.0, 920868.0, 537691.0, 606923.0, 253575.0, 226588.0, 285806.0, 227908.0, 421022.0, 655232.0, 322172.0, 393241.0, 267326.0, 712280.0, 549270.0, 657563.0, 653857.0, 881921.0, 304662.0, 803724.0, 255970.0, 678701.0, 935708.0, 506369.0, 884421.0, 848832.0, 405954.0, 621748.0, 540022.0, 924277.0, 586353.0, 406865.0, 554692.0, 932753.0, 884405.0, 371109.0, 571994.0, 266760.0, 864383.0, 663467.0, 920306.0, 514775.0, 311732.0, 298470.0, 931739.0, 857718.0, 594792.0, 323976.0, 359943.0, 433836.0, 976953.0, 633930.0, 849903.0, 675124.0, 532382.0, 329213.0, 612865.0, 818384.0, 518435.0, 529720.0, 459521.0, 794094.0, 657882.0, 740776.0, 344558.0, 296163.0, 584078.0, 877027.0, 975724.0, 635735.0, };
        double [] results = {100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 102500.0, 105000.0, 107500.0, 110000.0, 112500.0, 115000.0, 117500.0, 120000.0, 122500.0, 125000.0, 127500.0, 130000.0, 132500.0, 135000.0, 137500.0, 140000.0, 142500.0, 145000.0, 147500.0, 150000.0, 152500.0, 155000.0, 157500.0, 160000.0, 162500.0, 165000.0, 167500.0, 170000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 227500.0, 230000.0, 232500.0, 235000.0, 237500.0, 240000.0, 242500.0, 245000.0, 247500.0, 250000.0, 252500.0, 255000.0, 257500.0, 260000.0, 262500.0, 265000.0, 267500.0, 270000.0, 272500.0, 275000.0, 277500.0, 280000.0, 282500.0, 285000.0, 287500.0, 290000.0, 292500.0, 295000.0, 221654.4, 303377.7, 192865.0, 312633.7, 270000.0, 194874.2, 320404.2, 302321.4, 208344.8, 225227.8, 201409.9, 318335.7, 129703.5, 131320.5, 271521.0, 163962.5, 328005.6, 164994.2, 356061.8, 369275.9, 327965.7, 196151.3, 115000.0, 205000.0, 318928.3, 267542.4, 343696.1, 245968.7, 223467.1, 216548.5, 342842.9, 156098.3, 258840.0, 129275.7, 252764.0, 289178.7, 256613.0, 125000.0, 312528.6, 171804.0, 215765.9, 157162.2, 130000.0, 177148.9, 284591.7, 208575.8, 141907.4, 327107.0, 121702.9, 160571.9, 256582.0, 145643.0, 186455.7, 286983.9, 213398.6, 245000.0, 179107.0, 250928.6, 275506.9, 225798.6, 341014.2, 235000.0, 269403.2, 179158.6, 195192.2, 119172.5, 295000.0, 309794.5, 187538.9, 341575.6, 210000.0, 176759.1, 184042.5, 236036.9, 266583.4, 205000.0, 139282.4, 228122.4, 238233.6, 197618.9, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 62500.0, 65000.0, 67500.0, 70000.0, 72500.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 87500.0, 90000.0, 92500.0, 95000.0, 97500.0, 100000.0, 102500.0, 105000.0, 107500.0, 110000.0, 112500.0, 115000.0, 117500.0, 120000.0, 122500.0, 125000.0, 127500.0, 130000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 137500.0, 140000.0, 142500.0, 145000.0, 147500.0, 150000.0, 152500.0, 155000.0, 157500.0, 160000.0, 162500.0, 165000.0, 167500.0, 170000.0, 172500.0, 175000.0, 177500.0, 180000.0, 182500.0, 185000.0, 187500.0, 190000.0, 192500.0, 195000.0, 197500.0, 200000.0, 202500.0, 205000.0, 156536.5, 192135.8, 133989.3, 190911.9, 163808.0, 197673.7, 150763.2, 184016.9, 174083.3, 162865.1, 230920.4, 207968.4, 125133.5, 84000.0, 160594.4, 167378.6, 172173.1, 145116.3, 85016.6, 112755.5, 167686.5, 88086.3, 135169.6, 108000.0, 161737.7, 183801.6, 125078.3, 153000.0, 147072.2, 170482.2, 89052.8, 171180.1, 145326.3, 109193.3, 171000.0, 155894.6, 175654.6, 208628.4, 99464.1, 120673.6, 171000.0, 114000.0, 156672.5, 197543.4, 148948.7, 84872.9, 64624.8, 151946.5, 171585.4, 152699.0, 136812.7, 173036.5, 152827.0, 106949.4, 187916.9, 86750.8, 134380.2, 141000.0, 117450.70000000001, 170975.0, 160536.7, 214658.2, 87000.0, 100109.70000000001, 117483.1, 146046.2, 124346.5, 153353.6, 123000.0, 167361.9, 202863.7, 159000.0, 75000.0, 156695.0, 86371.5, 171164.2, 147111.7, 109292.3, 108887.4, 139938.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 52500.0, 55000.0, 57500.0, 60000.0, 62500.0, 65000.0, 67500.0, 70000.0, 72500.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 87500.0, 90000.0, 92500.0, 95000.0, 97500.0, 100000.0, 102500.0, 105000.0, 107500.0, 110000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 92500.0, 95000.0, 97500.0, 100000.0, 102500.0, 105000.0, 107500.0, 110000.0, 112500.0, 115000.0, 117500.0, 120000.0, 122500.0, 125000.0, 127500.0, 130000.0, 132500.0, 135000.0, 137500.0, 140000.0, 142500.0, 145000.0, 147500.0, 150000.0, 152500.0, 155000.0, 157500.0, 160000.0, 99073.0, 45556.8, 142511.8, 125812.5, 142884.9, 79669.6, 130785.0, 125151.3, 50000.0, 58145.1, 125682.3, 89347.20000000001, 105029.1, 144635.0, 102558.3, 133864.8, 94000.0, 128290.0, 79354.8, 70501.3, 165375.9, 60995.0, 77383.8, 80173.3, 161710.0, 149788.7, 124997.5, 127546.3, 107302.6, 66000.0, 95459.6, 167816.5, 50620.4, 152869.8, 120327.8, 106000.0, 172438.2, 95608.3, 121663.4, 172751.9, 169450.9, 93468.20000000001, 150376.9, 61898.0, 111181.5, 120878.6, 96024.3, 158540.3, 84000.0, 64313.9, 106000.0, 116000.0, 142031.40000000002, 95754.70000000001, 123006.1, 135543.1, 92868.0, 115833.4, 157403.0, 139980.8, 129729.9, 72977.4, 119603.4, 48000.0, 147053.1, 118000.0, 169971.8, 82549.9, 56218.1, 68000.0, 58250.8, 160516.2, 140265.5, 91169.8, 82260.1, 92000.0, 46404.0, 106836.5, 94000.0, 123368.5, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0, 40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 52500.0, 55000.0, 57500.0, 60000.0, 62500.0, 65000.0, 67500.0, 70000.0, 72500.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 87500.0, 90000.0, 92500.0, 95000.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 58750.0, 61250.0, 63750.0, 66250.0, 68750.0, 71250.0, 73750.0, 76250.0, 78750.0, 81250.0, 83750.0, 86250.0, 88750.0, 91250.0, 93750.0, 96250.0, 98750.0, 101250.0, 103750.0, 106250.0, 108750.0, 111250.0, 113750.0, 116250.0, 118750.0, 121250.0, 123750.0, 126250.0, 90876.2, 55801.8, 82280.6, 123464.0, 44492.8, 63750.0, 102521.70000000001, 101282.0, 91898.4, 120476.5, 78062.0, 73333.8, 97880.7, 96263.1, 111515.6, 59776.2, 111037.0, 101050.6, 120401.6, 85112.3, 49609.3, 69368.5, 61555.600000000006, 103170.6, 82050.6, 63544.5, 91680.0, 96425.20000000001, 127635.20000000001, 58750.0, 51250.0, 121219.4, 54925.7, 60980.6, 56239.0, 81705.1, 87159.1, 68593.8, 75531.1, 99060.0, 117363.6, 110534.6, 107571.20000000001, 57546.4, 64769.8, 119993.20000000001, 32500.0, 38972.8, 46250.0, 48498.2, 105822.3, 133371.4, 50399.5, 101694.70000000001, 68645.8, 83704.0, 133913.9, 111805.8, 49356.4, 108659.1, 77091.8, 80842.3, 86831.9, 55101.0, 33508.6, 108621.9, 50383.5, 65486.9, 76082.1, 74659.5, 75944.9, 134310.2, 80041.7, 42500.0, 97148.90000000001, 32635.3, 89691.1, 66506.3, 106604.4, 92286.8, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 17500.0, 20000.0, 22500.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0, 40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 52500.0, 55000.0, 57500.0, 60000.0, 62500.0, 65000.0, 67500.0, 70000.0, 72500.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 36250.0, 38750.0, 41250.0, 43750.0, 46250.0, 48750.0, 51250.0, 53750.0, 56250.0, 58750.0, 61250.0, 63750.0, 66250.0, 68750.0, 71250.0, 73750.0, 76250.0, 78750.0, 81250.0, 83750.0, 86250.0, 88750.0, 91250.0, 93750.0, 96250.0, 98750.0, 101250.0, 103750.0, 69027.6, 28310.4, 83186.0, 42750.0, 76030.1, 44250.0, 107149.0, 35868.2, 85178.9, 31336.0, 106631.5, 97336.8, 44769.100000000006, 48692.3, 34500.0, 32250.0, 21000.0, 28500.0, 38352.2, 52773.200000000004, 30717.2, 46824.1, 30750.0, 59978.0, 66177.0, 59006.3, 69135.70000000001, 96442.1, 37216.2, 89372.4, 26250.0, 57370.1, 80070.8, 52136.9, 95942.1, 89383.20000000001, 46595.4, 69674.8, 64502.2, 79677.70000000001, 55635.3, 42186.5, 43469.2, 88025.3, 79440.5, 22860.9, 67699.4, 23250.0, 99938.3, 79846.70000000001, 94280.6, 52227.5, 35673.2, 16500.0, 94673.9, 73021.8, 73729.2, 35397.6, 32244.3, 49383.6, 92445.3, 76893.0, 86490.3, 77262.4, 68238.2, 32921.3, 59036.5, 87838.4, 46593.5, 61222.0, 35452.1, 73409.4, 62038.200000000004, 74827.6, 23955.8, 26250.0, 72657.8, 101952.70000000001, 88572.40000000001, 68823.5, };

        for(int i = 0; i < degrees.length; i++){
            if(Math.abs(student.whatIsMySalary(degrees[i], yearsExperience[i], sales[i]) - results[i]) > .01){
                System.out.println("whatIsMySalary failed, " + "whatIsMySalary(" + degrees[i] + ", " + yearsExperience[i] + ", " + sales[i] + ")" + " results in " + student.whatIsMySalary(degrees[i], yearsExperience[i], sales[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("whatIsMySalary works");
        }else{
            System.out.println("whatIsMySalary does not work");
        }
        return output;
    }


    public static boolean testwhatIsMySalaryAfterTax(){
        PayRoll student = new PayRoll(); 
        boolean output = true;

        String [] degrees = {"Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree"};
        int [] yearsExperience = {15, 32, 30, 17, 36, 0, 10, 40, 17, 10, 17, 7, 14, 7, 18, 23, 13, 28, 0, 4, 20, 31, 5, 38, 15, 18, 0, 29, 13, 15, 30, 40, 36, 8, 16, 26, 21, 2, 37, 11, 2, 8, 28, 7, 17, 25, 36, 12, 6, 30, 29, 18, 29, 7, 23, 5, 30, 31, 9, 21, 2, 11, 40, 37, 8, 32, 7, 23, 29, 17, 19, 25, 6, 4, 0, 15, 4, 10, 6, 34, 17, 39, 19, 11, 0, 34, 9, 31, 32, 13, 19, 20, 3, 35, 19, 0, 8, 19, 14, 25, 40, 0, 25, 35, 35, 7, 19, 27, 19, 36, 39, 16, 32, 30, 3, 13, 20, 17, 31, 34, 7, 28, 10, 27, 6, 35, 40, 34, 14, 10, 21, 3, 20, 36, 28, 3, 17, 14, 12, 27, 15, 28, 36, 30, 20, 30, 7, 35, 0, 5, 40, 14, 28, 11, 32, 25, 28, 22, 29, 12, 29, 23, 28, 26, 9, 37, 29, 0, 8, 31, 38, 9, 16, 31, 18, 30, 18, 17, 16, 12, 5, 5, 33, 26, 11, 0, 38, 36, 38, 15, 9, 1, 1, 3, 12, 34, 37, 10, 14, 25, 28, 8, 37, 1, 36, 23, 3, 32, 9, 27, 10, 31, 8, 5, 17, 7, 1, 31, 10, 26, 36, 20, 25, 7, 29, 0, 11, 29, 3, 34, 40, 26, 24, 33, 3, 3, 1, 20, 8, 20, 2, 9, 12, 22, 20, 39, 8, 35, 11, 40, 2, 3, 15, 11, 15, 27, 33, 29, 0, 10, 3, 39, 31, 1, 34, 18, 18, 6, 34, 21, 11, 5, 37, 9, 1, 27, 40, 1, 31, 26, 21, 5, 16, 2, 6, 31, 24, 38, 9, 11, 15, 37, 6, 34, 24, 27, 24, 12, 15, 22, 9, 20, 28, 5, 21, 32, 1, 18, 27, 37, 4, 4, 22, 11, 4, 21, 31, 15, 35, 14, 22, 0, 36, 8, 19, 0, 7, 28, 11, 18, 20, 13, 40, 37, 0, 28, 16, 22, 38, 0, 14, 34, 18, 36, 20, 23, 38, 7, 31, 11, 16, 32, 8, 37, 24, 9, 2, 0, 5, 6, 26, 11, 33, 4, 36, 12, 34, 10, 37, 2, 18, 30, 34, 10, 16, 14, 30, 34, 15, 36, 25, 39, 0, 6, 18, 12, 5, 4, 40, 35, 33, 21, 32, 7, 27, 17, 25, 33, 39, 1, };
        Double [] sales = {874382.0, 573302.0, 946654.0, 747414.0, 590520.0, 420728.0, 407268.0, 443554.0, 325459.0, 399551.0, 364100.0, 333871.0, 420416.0, 721129.0, 553538.0, 829304.0, 261193.0, 873928.0, 897281.0, 420194.0, 853979.0, 778916.0, 832841.0, 255537.0, 855081.0, 449684.0, 412060.0, 966018.0, 332756.0, 885439.0, 745773.0, 958978.0, 339238.0, 324973.0, 772727.0, 813432.0, 971091.0, 989754.0, 330911.0, 203252.0, 796027.0, 844241.0, 509391.0, 376658.0, 724300.0, 301574.0, 458787.0, 620124.0, 402802.0, 402742.0, 438525.0, 534842.0, 209994.0, 397358.0, 278976.0, 953853.0, 529791.0, 454182.0, 236615.0, 527978.0, 582520.0, 229500.0, 220322.0, 408680.0, 891095.0, 221483.0, 766948.0, 855961.0, 860512.0, 238671.0, 544280.0, 999443.0, 748809.0, 710678.0, 559514.0, 380749.0, 707592.0, 769268.0, 651384.0, 305303.0, 970282.0, 827920.0, 444042.0, 831676.0, 266177.0, 787993.0, 340846.0, 626614.0, 938485.0, 399634.0, 736156.0, 713861.0, 644420.0, 505555.0, 223274.0, 544901.0, 315517.0, 895779.0, 976657.0, 619762.0, 656271.0, 301507.0, 886514.0, 485975.0, 459229.0, 256232.0, 223929.0, 343850.0, 614669.0, 352191.0, 414622.0, 286165.0, 292974.0, 620322.0, 699477.0, 200406.0, 777851.0, 561822.0, 259961.0, 361682.0, 628485.0, 559452.0, 786574.0, 544440.0, 448794.0, 396690.0, 668416.0, 481100.0, 541874.0, 212881.0, 982053.0, 695744.0, 527780.0, 622492.0, 457742.0, 540971.0, 602761.0, 526607.0, 801209.0, 866061.0, 318078.0, 944783.0, 749033.0, 544555.0, 556521.0, 995387.0, 635833.0, 289386.0, 984764.0, 352554.0, 251316.0, 983687.0, 659663.0, 307875.0, 965369.0, 755388.0, 866654.0, 564945.0, 899272.0, 823755.0, 668330.0, 294897.0, 921195.0, 745955.0, 641374.0, 981060.0, 244078.0, 691816.0, 879926.0, 780832.0, 604033.0, 574871.0, 343542.0, 732933.0, 597382.0, 467831.0, 827862.0, 938135.0, 354477.0, 530611.0, 636087.0, 241602.0, 928393.0, 479022.0, 829440.0, 344976.0, 576655.0, 422266.0, 734682.0, 276313.0, 714100.0, 297357.0, 386849.0, 946012.0, 915008.0, 928588.0, 585312.0, 516851.0, 942622.0, 340167.0, 241291.0, 716268.0, 784197.0, 750165.0, 494959.0, 418991.0, 269673.0, 273873.0, 480234.0, 228165.0, 852138.0, 364719.0, 215419.0, 383082.0, 328159.0, 220852.0, 697785.0, 921656.0, 276156.0, 785529.0, 280238.0, 425747.0, 590898.0, 369421.0, 208193.0, 277488.0, 492273.0, 922976.0, 394776.0, 754711.0, 786460.0, 986945.0, 312478.0, 293607.0, 757605.0, 349218.0, 879398.0, 646761.0, 868145.0, 836076.0, 218175.0, 864660.0, 245903.0, 665991.0, 365778.0, 828819.0, 536071.0, 794110.0, 612216.0, 864644.0, 696210.0, 275524.0, 546354.0, 962151.0, 312397.0, 275475.0, 886927.0, 932674.0, 414636.0, 554596.0, 776876.0, 629690.0, 569665.0, 457340.0, 819155.0, 361869.0, 829274.0, 631701.0, 532101.0, 226497.0, 512273.0, 308352.0, 702523.0, 491376.0, 398225.0, 367349.0, 514609.0, 553338.0, 711069.0, 220492.0, 332800.0, 601503.0, 270761.0, 737493.0, 416736.0, 713384.0, 791067.0, 844067.0, 446406.0, 311991.0, 501604.0, 420068.0, 935640.0, 312042.0, 672297.0, 725812.0, 612036.0, 883408.0, 818332.0, 984673.0, 841490.0, 759916.0, 963771.0, 350133.0, 375411.0, 221655.0, 741915.0, 285360.0, 698779.0, 478874.0, 510580.0, 983467.0, 857155.0, 385624.0, 260370.0, 856567.0, 840764.0, 411263.0, 294112.0, 321759.0, 803795.0, 797948.0, 655544.0, 912155.0, 397023.0, 232230.0, 485399.0, 541083.0, 291888.0, 758902.0, 283018.0, 347589.0, 974154.0, 865184.0, 651585.0, 351368.0, 485273.0, 463419.0, 905146.0, 545233.0, 989580.0, 900365.0, 315517.0, 253267.0, 645442.0, 921229.0, 977206.0, 782772.0, 258489.0, 916559.0, 268475.0, 598136.0, 795048.0, 780127.0, 286683.0, 444760.0, 833904.0, 905919.0, 236006.0, 851147.0, 834525.0, 852364.0, 345682.0, 237296.0, 499859.0, 801924.0, 496900.0, 457522.0, 511841.0, 744165.0, 936452.0, 405817.0, 917726.0, 510453.0, 655282.0, 911896.0, 645378.0, 788369.0, 410048.0, 356025.0, 425643.0, 643996.0, 765833.0, 630797.0, 399924.0, 880195.0, 938114.0, 877932.0, 691085.0, 358978.0, 412134.0, 628265.0, 615809.0, 616136.0, 717786.0, 573033.0, 416545.0, 696213.0, 938138.0, 594579.0, };
        double [] results = {171875.344, 208652.984, 226967.56800000003, 170068.488, 223206.59, 87516.666, 122547.54599999999, 226759.86800000002, 141797.503, 121991.922, 144386.45, 106462.962, 137894.202, 134345.538, 160428.79599999997, 195655.11800000002, 125624.25, 215394.92599999998, 121828.482, 101878.218, 187258.343, 219079.12199999997, 135188.802, 210441.75, 170582.177, 153470.57799999998, 86892.57, 224914.956, 127982.682, 172616.163, 213508.541, 261293.27599999998, 206370.696, 109422.30599999998, 168414.459, 204641.69400000002, 198454.84699999998, 135686.538, 209162.78699999998, 118424.25, 121738.194, 146405.897, 190970.947, 109543.62599999999, 168519.85, 166997.20799999998, 214380.479, 144790.058, 107825.994, 190525.464, 189572.925, 159176.164, 180291.75, 111034.02599999998, 160191.75, 143699.90099999998, 199037.74699999997, 197321.94400000002, 111224.25, 168766.27599999998, 106365.69, 118424.25, 217141.75, 214373.31, 149545.115, 190341.75, 137644.506, 197441.137, 217846.054, 140024.25, 163158.51, 213754.43099999998, 132738.498, 122793.06599999999, 97509.258, 138638.17799999999, 122570.87400000001, 148082.706, 125723.89799999999, 197397.05099999998, 135004.554, 170102.39, 101435.274, 112064.922, 49143.75, 157377.281, 72405.16200000001, 140500.45799999998, 163440.245, 85277.89799999999, 122467.482, 123022.242, 81302.48999999999, 140424.21, 91064.25, 67511.32500000001, 68307.525, 133960.338, 128983.554, 127047.114, 160611.907, 49256.774999999994, 145888.188, 139014.45, 137088.738, 64893.75, 91064.25, 111501.45, 113720.41799999999, 131542.002, 142411.424, 84584.25, 119144.25, 137887.434, 85266.59400000001, 78104.25, 127629.522, 105595.43400000001, 116984.25, 127905.354, 88795.17, 129184.79400000001, 106657.578, 125943.93, 73697.41799999999, 132585.93, 161425.622, 136503.45, 97679.17799999999, 71624.25, 144249.30099999998, 84997.818, 109624.41, 150308.714, 121861.674, 73854.16200000001, 108543.042, 96579.954, 112031.298, 148537.837, 83725.86600000001, 155822.211, 158786.961, 132432.21, 111693.762, 163232.679, 89324.226, 125624.25, 99327.258, 64335.299999999996, 136424.25, 129489.714, 136399.98599999998, 74351.25, 165241.473, 136812.186, 150587.568, 116620.29, 154782.97400000002, 113654.61, 103904.01, 68643.75, 120670.29, 105173.01, 73163.178, 137940.57, 77384.25, 63529.950000000004, 88898.922, 114884.15400000001, 112234.62599999999, 68259.07500000001, 61409.399999999994, 111435.42599999999, 82955.754, 90908.082, 99550.31400000001, 106049.97, 62229.524999999994, 69439.57500000001, 66850.27500000001, 41643.75, 128388.54599999999, 85953.834, 89583.93, 37516.95, 110263.41, 96267.402, 121641.354, 56643.75, 78399.45, 35643.75, 42157.425, 86457.114, 97184.826, 129842.58599999998, 109446.714, 65407.575000000004, 102053.03400000001, 74516.274, 75944.25, 77115.546, 123766.43400000001, 69406.125, 101501.298, 77311.602, 38643.75, 81704.25, 61161.299999999996, 74504.25, 89778.186, 84924.018, 46143.75, 47874.899999999994, 61755.674999999996, 44643.75, 65477.625, 125023.482, 49143.75, 108022.33799999999, 87464.25, 73478.034, 92568.906, 49850.325, 77384.25, 34143.75, 65064.225000000006, 122238.522, 45751.95, 117323.44200000001, 128249.37, 122524.29, 71079.6, 83144.25, 72891.81, 42335.100000000006, 78780.906, 89391.042, 88050.69, 103021.72200000001, 23828.75, 73579.77, 34143.75, 70968.07500000001, 46577.100000000006, 97999.218, 48099.075000000004, 91900.17, 56622.450000000004, 101478.61799999999, 54484.5, 24891.25, 55432.799999999996, 82399.122, 37886.024999999994, 48206.25, 96782.994, 96476.77799999999, 31447.809999999998, 51363.450000000004, 61471.950000000004, 83661.93, 72140.13, 35631.75, 92803.41, 44408.925, 79131.978, 53396.325000000004, 72135.522, 42581.25, 49126.725000000006, 27726.17, 87105.906, 45684.450000000004, 31115.375, 53257.425, 76276.098, 42831.600000000006, 82321.218, 47268.75, 45041.25, 50193.975000000006, 37893.75, 57580.725000000006, 37273.95, 82487.89799999999, 81781.07400000001, 98197.07400000001, 42311.7, 34105.575, 52076.55, 66586.35, 75990.33, 55671.899999999994, 73229.634, 79782.714, 68796.45000000001, 77629.626, 75644.15400000001, 93920.706, 71911.53, 75938.202, 97815.762, 31277.555, 48237.075, 52893.75, 56974.875, 39768.75, 77836.33799999999, 70996.79999999999, 42437.25, 77633.874, 84739.41, 39628.05, 25953.75, 83797.07400000001, 91659.258, 45300.975000000006, 55706.25, 37650.675, 65553.375, 52739.850000000006, 62309.549999999996, 65805.375, 33357.975000000006, 13203.75, 33236.175, 49224.975000000006, 20216.25, 59936.40000000001, 25953.75, 25536.315000000002, 87763.338, 78297.49799999999, 41762.625, 34996.350000000006, 38289.225000000006, 40025.175, 81714.762, 33786.225000000006, 74834.01, 79210.53, 25997.695, 35643.75, 52551.9, 74772.738, 86903.082, 55539.15000000001, 32831.25, 67823.17499999999, 23403.75, 55753.950000000004, 57022.350000000006, 72173.394, 28503.75, 31245.85, 56561.549999999996, 60837.674999999996, 16391.25, 60104.77500000001, 70108.125, 63008.549999999996, 37382.399999999994, 15753.75, 50633.175, 59788.049999999996, 49286.25, 32832.899999999994, 52094.325000000004, 49831.125, 73168.79400000001, 40205.024999999994, 80460.522, 36802.725000000006, 51039.9, 69160.95000000001, 58172.100000000006, 71146.42499999999, 32084.850000000002, 39845.625, 38879.475000000006, 63130.950000000004, 50331.225000000006, 43578.525, 33013.05, 65658.375, 66064.79999999999, 60988.65000000001, 67225.125, 39504.600000000006, 42366.3, 51826.125, 57079.424999999996, 43041.450000000004, 61915.200000000004, 45433.725000000006, 38197.125, 63672.225000000006, 84630.186, 38049.675, };

        for(int i = 0; i < degrees.length; i++){
            if(Math.abs(student.whatIsMySalaryAfterTax(degrees[i], yearsExperience[i], sales[i]) - results[i]) > .01){
                System.out.println("whatIsMySalaryAfterTax failed, " + "whatIsMySalaryAfterTax(" + degrees[i] + ", " + yearsExperience[i] + ", " + sales[i] + ")" + " results in " + student.whatIsMySalaryAfterTax(degrees[i], yearsExperience[i], sales[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("whatIsMySalaryAfterTax works");
        }else{
            System.out.println("whatIsMySalaryAfterTax does not work");
        }
        return output;
    }


    public static boolean testisALeapYear(){
        Calendar student = new Calendar(); 
        boolean output = true;

        int [] years = {};
        boolean [] results = {false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, };

        for(int i = 0; i < years.length; i++){
            if(student.isALeapYear(years[i]) != results[i]){
                System.out.println("isALeapYear failed, " + "isALeapYear(" + years[i] + ")" + " results in " + student.isALeapYear(years[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("isALeapYear works");
        }else{
            System.out.println("isALeapYear does not work");
        }
        return output;
    }

}
